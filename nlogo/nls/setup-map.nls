; __includes ["check-gis.nls" "lookup-series-color.nls"]
; extensions [gis]

; globals [
;   background-color
;   black-value
;   data-series
;   max-value
;   min-value
;   white-max
;   white-value
; ]

to setup-map
  assert-gis dataset

  let envelope gis:envelope-of dataset

  ifelse ((item 0 envelope < -150) or (item 1 envelope > 150)) [
    gis:set-world-envelope-ds envelope
  ] [
    gis:set-world-envelope envelope
  ]

  gis:apply-raster dataset value

  if (any-true? test-world-bleed) [remove-world-bleed 1]
  
  set max-value max [value] of patches with [not is-nan? value]
  set min-value min [value] of patches with [not is-nan? value]
  
  ; Correct inflated values
  if ((max-value - min-value) > (10 ^ 6)) [
    let extreme-values extreme-unique-values (
      [value] of patches with [not is-nan? value]
    ) 10
    
    ask patches with [member? value extreme-values] [
      set value nan
    ]
    
    set max-value max [value] of patches with [not is-nan? value]
    set min-value min [value] of patches with [not is-nan? value]
  ]
  
  ifelse (white-max = true) [
    set max-pcolor-value max-value
  ] [
    set max-pcolor-value white-value
  ]

  ifelse (black-min = true) [
    set min-pcolor-value min-value
  ] [
    set min-pcolor-value black-value
  ]

  ask (patches) [
    ifelse (not is-nan? value) [
      let series-color lookup-series-color data-series

      set pcolor (
        scale-color series-color value min-pcolor-value max-pcolor-value
      )
    ] [
      set pcolor background-color
    ]

    let patch-envelope gis:envelope-of self
    set latitude sublist patch-envelope 0 2
    set longitude sublist patch-envelope 2 4
  ]
end
