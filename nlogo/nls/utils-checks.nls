; # Metadata
; 
; This file is part of the model:
; {logoclim}: WorldClim 2.1 on NetLogo.
; 
; Extensions used: pathdir, sr.

; # Halt functions

to halt
  error (word
    "The model stopped running due "
    "to the reason presented in the "
    "last dialog window."
  )
end

; # Test functions

to-report all-true? [#list]
  assert-list #list
  
  report reduce [[i j] -> i and j] #list
end

to-report any-true? [#list]
  assert-list #list
  
  report reduce [[i j] -> i or j] #list
end

to-report is-integer? [#x]
  ifelse (not is-number? #x) [
    report false
  ] [
    report (int #x) = #x
  ]
end

to-report is-logical? [#x]
  report #x = true or #x = false
end

to-report is-atomic? [#x]
  report not is-list? #x
end

to-report is-gis? [#x]
  let test true
  
  carefully [
    let dummy gis:type-of #x
  ] [
    set test false
  ]
  
  report test
end

to-report test-string-in-r [#string]
  assert-string #string
  
  let test true
  
  carefully [
    let r-test sr:runresult (word "'" #string "'")
  ] [
    set test false
  ]
  
  report test
end

to-report test-series-raw-data-path [#series-raw-path]
  assert-string #series-raw-path
  
  (sr:run
    (word
      "path <- "
      "'"
      fix-string-for-r #series-raw-path
      "'"
    )
    (word
      "test <- ifelse("
      "dir.exists(path),"
      "!length(list.files(path)) == 0,"
      "FALSE"
      ")"
    )
  )

  report sr:runresult "test"
end

; # Assert/check functions

to assert-string [#x]
  if (not is-string? #x) [
    error "The value is not a string."
  ]
end

to assert-number [#x]
  if (not is-number? #x) [
    error "The value is not a number."
  ]
end

to assert-integer [#x]
  if (not is-integer? #x) [
    error "The value is not an integer number."
  ]
end

to assert-string-or-number [#x]
  if (not is-string? #x and not is-number? #x) [
    error "The value is neither a string nor a number."
  ]
end

to assert-string-or-integer [#x]
  if (not is-string? #x and not is-integer? #x) [
    error "The value is neither a string nor an integer number."
  ]
end

to assert-logical [#x]
  if (not is-logical? #x) [
    error "The value is not logical/boolean."
  ]
end

to assert-atomic [#x]
  if (not is-atomic? #x) [
    error "The value is not atomic."
  ]
end

to assert-list [#x]
  if (not is-list? #x) [
    error "The value is not a list."
  ]
end

to assert-gis [#x]
  if (not is-gis? #x) [
    error "The value is not a GIS dataset."
  ]
end

to assert-file-exists [#file]
  assert-string #file
  
  if (not file-exists? #file) [
    error (word "The file " #file "does not exist.")
  ]
end

to assert-dir-exists [#dir]
  assert-string #dir
  
  if (not pathdir:isDirectory? #dir) [
    error (word 
      "The directory" #dir "does not exist."
    )
  ]
end

to assert-implementation
  (ifelse
    (data-resolution = "30 seconds (~1 km2  at the equator)") [
      user-message (word
        "The '30 seconds (~1 km2  at the equator)' "
        "option is not yet implemented."
      )
      
      halt
    ]
    (data-resolution = "2.5 minutes (~21 km2 at the equator)") [
      user-message (word
        "The '2.5 minutes (~21 km2 at the equator)' "
        "option is not yet implemented."
      )
      
      halt
    ]
    (data-resolution = "5 minutes (~85 km2 at the equator)") [
      user-message (word
        "The '5 minutes (~85 km2 at the equator)' "
        "option is not yet implemented."
      )
      
      halt
    ]
    (climate-variable = "Bioclimatic variables") [
      user-message (word
        "The 'Bioclimatic variables' "
        "option is not yet implemented."
      )
      
      halt
    ]
  )
end

to assert-base-file
  sr-run-assign-files data-raw-path base-file-pattern
  sr:run "base_file <- files[1]"

  if (sr:runresult "is.na(base_file)" = true) [
    let choice user-yes-or-no? (word
      "No base file was found in the raw data "
      "directory. "
      "Do you want to select the file?"
    )
    
    ifelse (choice = true) [
      set base-file user-file
      
      if (str-detect basename base-file base-file-pattern = false) [
        user-message (word
          "The selected file is not a valid base file. " 
          "Please check your settings."
        )
        
        halt
      ]
    ] [
      halt 
    ]
  ]
end

to assert-data
  let path series-data-raw-path-lookup data-series
  let test test-series-raw-data-path path

  if (test = false) [
    error (word
      "There are no data available to run the "
      "'" data-series "' "
      "series. "
      "Please check your settings."
    )
  ]
end

to assert-year [#year]
  assert-string-or-integer #year

  if (str-detect #year "^[0-9]{4}" = false) [
    error "The year must have 4 digits."
  ]
  
  if (is-string? #year) [set #year read-from-string #year]
  
  (ifelse
    (#year < 1960 or #year > 2100) [
      user-message (word 
        "You must choose a year between 1960 and 2100."
      )
      
      halt
    ]
    (data-series = "Historical climate data" and (#year < 1970 or #year > 2000)) [
      user-message (word
        "The year for the 'Historical climate data' "
        "series must be between "
        "1970 and 2000."
      )
      
      halt
    ]
    (data-series = "Historical monthly weather data" and #year > 2021) [
      user-message (word
        "The year for the 'Historical monthly weather data' "
        "series must be between "
        "1960 and 2021."
      )
      
      halt
    ]
    (data-series = "Future climate data" and (#year < 2021 or #year > 2100)) [
      user-message (word
        "The year for the 'Future climate data' "
        "series must be between "
        "2021 and 2100."
      )
      
      halt
    ]
  )
end

to assert-variables
  let variables []

  (ifelse
    (data-series = "Historical climate data") [
      set variables [
        "Average minimum temperature (°C)"
        "Average maximum temperature (°C)"
        "Average temperature (°C)"
        "Total precipitation (mm)"
        "Solar radiation (kJ m^-2 day^-1)"
        "Wind speed (m s^-1)"
        "Water vapor pressure (kPa)"
        "Bioclimatic variables"
        "Elevation"
      ]
   ]
    (data-series = "Historical monthly weather data") [
      set variables [
        "Average minimum temperature (°C)"
        "Average maximum temperature (°C)"
        "Total precipitation (mm)"
      ]
    ]
    (data-series = "Future climate data") [
      set variables [
        "Average minimum temperature (°C)"
        "Average maximum temperature (°C)"
        "Total precipitation (mm)"
        "Bioclimatic variables"
      ]
    ]
  )

  if (not member? climate-variable variables) [
    set variables collapse variables "\n"

    user-message (word
      "The option "
      "'" climate-variable "' "
      "cannot be used with "
      "'" data-series "' "
      "series. "
      "Use one the following options: "
      "\n"
      variables
    )
    
    halt
  ]
end
