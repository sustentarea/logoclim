; __includes [
;   "list-files-by-pattern.nls"
;   "lookup-series-data-path.nls"
;   "num-to-str-month.nls"
;   "pattern-fcd-file.nls"
;   "str-extract.nls"
;   "str-to-num-month.nls"
; ]

; extensions [time]
; globals [climate-variable start-month start-year]

to setup-fcd-variables
  let path lookup-series-data-path
  let pattern pattern-fcd-file
  
  set files list-files-by-pattern path pattern
  
  set years as-list (str-extract files "[0-9]{4}-[0-9]{4}")
  let start-years as-list (str-extract years "^[0-9]{4}")
  set start-years map read-from-string start-years
  
  set months as-list (str-extract files "[0-9]{2}(?=.asc)")
  let num-start-month str-to-num-month start-month
  
  let start-dates (map [[i j] -> (word i "-" j "-01")] start-years months)
  set start-dates map [i -> time:create i] start-dates
  
  let fcd-interval lookup-fcd-interval
  
  ifelse (climate-variable != "Bioclimatic variables") [
    let start-date time:create (word 
      (item 0 fcd-interval) "-" 
      num-start-month
      "-01"
    )
    
    set files filter [
      i -> 
        time:is-between? 
          (item (position i files) start-dates)
          start-date
          time:create "2100-12-31"
    ] files
    
    set years as-list (str-extract files "[0-9]{4}-[0-9]{4}")
    
    set months as-list (str-extract files "[0-9]{2}(?=.asc)")
    set months map read-from-string months
    set months map num-to-str-month months
  ] [
    set files filter [
      i -> 
        (item (position i files) start-years >= (item 0 fcd-interval)) and
        (item (position i files) start-years <= 2100)
    ] files
    
    set years as-list (str-extract files "[0-9]{4}-[0-9]{4}")
    set months n-values (length files) ["NA"]
  ]
end
