---
params:
  series: "historical-climate-data"
  resolution: "10m"
  country_code: "bra"
  country_suffix: NULL
  series_suffix: NULL
---

# LogoClim: WorldClim 2.1 Data Download

## Overview

::: {.callout-note}
This document is intended for use by the LogoClim project team. For related workflows, refer to the other notebooks in the `qmd` directory, which cover data downloading and transformation procedures.
:::

This document provides a step-by-step guide for uploading WorldClim 2.1 data to the [LogoClim OSF repository](https://osf.io/2bpjh/). For information on obtaining the data, see the [WorldClim website](https://www.worldclim.org/).

## Setting the Environment

```{r}
library(beepr)
library(cli)
library(dplyr)
library(fs)
library(groomr) # github.com/danielvartan/groomr
library(here)
library(osfr)
library(purrr)
library(readr)
library(rutils) # github.com/danielvartan/rutils
library(stringr)
library(zip) # OS independent
```

```{r}
source(here::here("R", "wc_license.R"))
source(here::here("R", "wc_readme.R"))
```

## Setting the Initial Variables

### `params`

This code chunk is only used when the document is rendered from the command line. See `quarto-loop.R` in the `R` directory for more details.

```{r}
if (exists("params")) params |> list2env(envir = environment())
```

### Options

```{r}
options(cli.progress_show_after = 0)
```

### Series

Pick **one** of the following.

```{r}
#| eval: false

series <- "historical-climate-data"
```

```{r}
#| eval: false

series <- "historical-monthly-weather-data"
```

```{r}
#| eval: false

series <- "future-climate-data"
```

### Resolution

Pick **one** of the following.

```{r}
#| eval: false

resolution <- "10m"
```

```{r}
#| eval: false

resolution <- "5m"
```

```{r}
#| eval: false

resolution <- "2.5m"
```

```{r}
#| eval: false

resolution <- "30s"
```

```{r}
#| eval: false

resolution <- "all"
```

### Directories

Check the paths to the directories where the data will be stored.

```{r}
raw_data_dir <- here::here("data-raw")
```

```{r}
wc_raw_data_dir <- fs::path(raw_data_dir, "worldclim")
```

```{r}
wc_raw_data_series_dir <- fs::path(wc_raw_data_dir, series)
```

```{r}
wc_raw_data_series_res_dir <- fs::path(wc_raw_data_dir, series, resolution)
```

```{r}
data_dir <- here::here("data")
```

```{r}
data_series_dir <- fs::path(data_dir, series)
```

```{r}
dirs <- c(
  raw_data_dir, wc_raw_data_dir, wc_raw_data_series_dir,
  wc_raw_data_series_res_dir, data_dir, data_series_dir
)

for (i in dirs) {
  if (!dir.exists(i)) {
    fs::dir_create(i, recurse = TRUE)
  }
}
```

## Zipping the Files

```{r}
#| eval: false

country_code <- "bra"
country_suffix <- NULL # "box" # "mainland"
series_suffix <- NULL # "hcd" # "hmwd" # "fcd"
```

```{r}
#| eval: true

zip_file <-
  data_dir |>
  fs::path(
      paste0(
      country_code,
      ifelse(!is.null(country_suffix), paste0("-", country_suffix), ""),
      paste0("-", resolution),
      ifelse(!is.null(series_suffix), paste0("-", series_suffix), ""),
      ".zip"
    )
  )

zip_file
```

```{r}
#| eval: true

zip_file |>
  zip::zip(
    files =
      data_dir |>
      fs::dir_ls(
        type = "file",
        regexp = "\\.zip$|\\.gitignore$",
        recurse = TRUE,
        invert = TRUE
      ) |>
      fs::path_rel(data_dir),
    root = data_dir
  )

beepr::beep(1)
```

### Adding LICENSE and README Files

```{r}
#| eval: true

txt_license <- fs::file_copy(
  fs::path(data_dir, "LICENSE.md"),
  fs::path(tempdir(), "license.txt"),
  overwrite = TRUE
)
```

```{r}
#| eval: true

osf_files <-
  data_dir |>
    fs::path(c("LICENSE.md", "README.md")) |>
    c(txt_license, zip_file) |>
    unname()

osf_files
```

## Uploading the Files to OSF

```{r}
#| eval: true

prettycheck::assert_internet()

osfr::osf_auth()
```

```{r}
#| eval: true

if (resolution == "10m") {
  osf_id <- "x7fcm"
} else if (resolution == "5m") {
  osf_id <- "un5jm"
} else if (resolution == "2.5m") {
  osf_id <- "4vxet"
} else if (resolution == "30s") {
  osf_id <- "qgyha"
}

osf_id
```

```{r}
#| eval: false

# osf_files <-
#   osf_files |>
#   stringr::str_subset("tmin")
#   magrittr::extract(seq(1, length(osf_files)))
```

```{r}
#| eval: true

osf_id |>
  osfr::osf_retrieve_node() |>
  osfr::osf_upload(
    path = osf_files,
    conflicts = "overwrite",
    progress = TRUE,
    verbose = TRUE
  )

beepr::beep(1)
```

## Deleting Files on OSF (Optional)

::: {.callout-caution}
Careful! There is no coming back from this.
:::

```{r}
#| eval: false

if (resolution == "10m") {
  osf_id <- "x7fcm"
} else if (resolution == "5m") {
  osf_id <- "un5jm"
} else if (resolution == "2.5m") {
  osf_id <- "4vxet"
} else if (resolution == "30s") {
  osf_id <- "qgyha"
}

osf_id
```

```{r}
#| eval: false

file_list <-
  osf_id |>
  osfr::osf_retrieve_node() |>
  osfr::osf_ls_files(
    pattern = "_2-5m",
    n_max = Inf
  )

file_list
```

```{r}
#| eval: false

# for (i in split(file_list, seq_len(nrow(file_list)))) {
#   i |> osfr::osf_rm(check = FALSE)
# }
```
