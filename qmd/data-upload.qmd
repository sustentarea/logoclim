---
params:
  series: "historical-climate-data"
  resolution: "10m"
  country_code: "bra"
  country_suffix: NULL
---

# LogoClim: WorldClim 2.1 Data Download

## Overview

::: {.callout-note}
This document is intended for use by the LogoClim project team. For related workflows, refer to the other notebooks in the `qmd` directory, which cover data downloading and transformation procedures.
:::

This document provides a step-by-step guide for uploading WorldClim 2.1 data to the [LogoClim OSF repository](https://osf.io/2bpjh/). For information on obtaining the data, see the [WorldClim website](https://www.worldclim.org/).

## Setting the Environment

```{r}
library(beepr)
library(cli)
library(dplyr)
library(fs)
library(groomr) # github.com/danielvartan/groomr
library(here)
library(osfr)
library(purrr)
library(readr)
library(rutils) # github.com/danielvartan/rutils
library(stringr)
library(zip) # OS independent
```

```{r}
source(here::here("R", "wc_license.R"))
source(here::here("R", "wc_readme.R"))
```

## Setting the Initial Variables

### `params`

This code chunk is only used when the document is rendered from the command line. See `quarto-loop.R` in the `R` directory for more details.

```{r}
if (exists("params")) params |> list2env(envir = environment())
```

### Options

```{r}
options(cli.progress_show_after = 0)
```

### Series

Pick **one** of the following.

```{r}
#| eval: false

series <- "historical-climate-data"
```

```{r}
#| eval: false

series <- "historical-monthly-weather-data"
```

```{r}
#| eval: false

series <- "future-climate-data"
```

### Resolution

Pick **one** of the following.

```{r}
#| eval: false

resolution <- "10m"
```

```{r}
#| eval: false

resolution <- "5m"
```

```{r}
#| eval: false

resolution <- "2.5m"
```

```{r}
#| eval: false

resolution <- "30s"
```

```{r}
#| eval: false

resolution <- "all"
```

### Directories

Check the paths to the directories where the data will be stored.

```{r}
raw_data_dir <- here::here("data-raw")
```

```{r}
wc_raw_data_dir <- fs::path(raw_data_dir, "worldclim")
```

```{r}
wc_raw_data_series_dir <- fs::path(wc_raw_data_dir, series)
```

```{r}
wc_raw_data_series_res_dir <- fs::path(wc_raw_data_dir, series, resolution)
```

```{r}
data_dir <- here::here("data")
```

```{r}
data_series_dir <- fs::path(data_dir, series)
```

```{r}
dirs <- c(
  raw_data_dir, wc_raw_data_dir, wc_raw_data_series_dir,
  wc_raw_data_series_res_dir, data_dir, data_series_dir
)

for (i in dirs) {
  if (!dir.exists(i)) {
    fs::dir_create(i, recurse = TRUE)
  }
}
```

## Unzipping the Raw Data Files (Optional)

```{r}
#| eval: false

zip_dir <- fs::path(wc_raw_data_series_res_dir, "zip")
```

```{r}
#| eval: false

tif_dir <- fs::path(wc_raw_data_series_res_dir, "tif")

if (!dir.exists(tif_dir)) tif_dir |> fs::dir_create(recurse = TRUE)
```

```{r}
#| eval: false

accompanying_files <- c("README.md", "LICENSE.md")

for (i in accompanying_files) {
  if (file.exists(fs::path(zip_dir, i))) {
    fs::file_copy(
      fs::path(zip_dir, i),
      fs::path(tif_dir, i),
      overwrite = TRUE
    )
  }
}
```

```{r}
#| eval: false
#| output: false

zip_files <- zip_dir |> fs::dir_ls(type = "file", regexp = "zip$")

cli::cli_progress_bar(
  name = "Unzipping data",
  total = length(zip_files),
  clear = FALSE
)

for (i in zip_files) {
  i |>
    zip::unzip(
      overwrite = TRUE,
      exdir = tif_dir
    )

  cli::cli_progress_update()
}

cli::cli_progress_done()

beepr::beep(1)
```

```{r}
#| eval: false

zip_dir |> fs::dir_delete()
```

## Zipping the Raw Data Files (Optional)

### Creating the Metadata

```{r}
#| eval: false

tif_dir <- fs::path(wc_raw_data_series_res_dir, "tif")
```

```{r}
#| eval: false

files <- tif_dir |> fs::dir_ls(type = "file", regexp = "tif$")
```

```{r}
#| eval: false

sizes <-
  files |>
  purrr::map_dbl(
    .f = rutils::get_file_size,
    .progress = TRUE
  ) |>
  fs::as_fs_bytes()

beepr::beep(1)
```

```{r}
#| eval: false

metadata <-
  dplyr::tibble(
    file = basename(files),
    size = sizes
  ) |>
  dplyr::arrange(size) |>
  dplyr::mutate(
  size_cum_sum =
      size |>
      tidyr::replace_na() |>
      cumsum() |>
      fs::as_fs_bytes()
  )
```

```{r}
#| eval: false

metadata
```

```{r}
#| eval: false

metadata |> dplyr::pull(size_cum_sum) |> dplyr::last()
```

### Zipping the Files

```{r}
#| eval: false

zip_dir <- fs::path(wc_raw_data_series_res_dir, "zip")

if (!dir.exists(zip_dir)) zip_dir |> fs::dir_create(recurse = TRUE)
```

```{r}
#| eval: false

if (series == "historical-monthly-weather-data") {
  prefix_start <- "wc2.1_cruts4.09_" # Always check this number!
} else {
  prefix_start <- "wc2.1_"
}
```

```{r}
#| eval: false

climate_variable <-
  metadata |>
  dplyr::pull(file) |>
  orbis:::extract_wc_variable() |>
  unique()

climate_variable
```

```{r}
#| eval: false

model <-
  metadata |>
  dplyr::pull(file) |>
  orbis:::extract_wc_gcm() |>
  unique()

model
```

For zipping files by climate variable, use:

```{r}
#| eval: false

cli::cli_progress_bar(
  name = "Zipping data",
  total = length(climate_variable),
  clear = FALSE
)

for (i in climate_variable) {
  metadata |>
    dplyr::pull(file) |>
    groomr::zip_files_by_pattern(
      pattern = i,
      prefix = paste0(prefix_start, resolution, "_"),
      max_size = fs::fs_bytes("5GB"),
      appendices = c("LICENSE.md", "README.md"),
      root = tif_dir,
      dir = zip_dir
    )

  cli::cli_progress_update()
}

cli::cli_progress_done()

beepr::beep(1)
```

For zipping files by model, use:

```{r}
#| eval: false

cli::cli_progress_bar(
  name = "Zipping data",
  total = length(model),
  clear = FALSE
)

for (i in model) {
  metadata |>
    dplyr::pull(file) |>
    groomr::zip_files_by_pattern(
      pattern = i,
      prefix = paste0(prefix_start, resolution, "_"),
      max_size = fs::fs_bytes("5GB"),
      appendices = c("LICENSE.md", "README.md"),
      root = tif_dir,
      dir = zip_dir
    )

  cli::cli_progress_update()
}

cli::cli_progress_done()

beepr::beep(1)
```

For zipping files by model and climate variable, use:

```{r}
#| eval: false

cli::cli_progress_bar(
  name = "Zipping data",
  total = length(model) * length(climate_variable),
  clear = FALSE
)

for (i in model) {
  for (j in climate_variable) {
    metadata |>
      dplyr::pull(file) |>
      groomr::zip_files_by_pattern(
        pattern = paste0(j, "_", i),
        prefix = paste0(prefix_start, resolution, "_"),
        max_size = fs::fs_bytes("5GB"),
        appendices = c("LICENSE.md", "README.md"),
        root = tif_dir,
        dir = zip_dir
      )

      cli::cli_progress_update()
  }
}

cli::cli_progress_done()

beepr::beep(1)
```

For zipping the entire series, use:

```{r}
#| eval: false

metadata |>
  dplyr::pull(file) |>
  groomr::zip_files_by_pattern(
    pattern = ".",
    prefix = paste0(prefix_start, resolution),
    max_size = fs::fs_bytes("5GB"),
    appendices = c("LICENSE.md", "README.md"),
    root = tif_dir,
    dir = zip_dir
  )

beepr::beep(1)
```

## Zipping the Processed Files (Optional)

```{r}
#| eval: false

country_code <- "bra"
country_suffix <- NULL # "mainland"
```

```{r}
#| eval: true

zip_file <-
  data_dir |>
  fs::path(
      paste0(
      country_code,
      ifelse(!is.null(country_suffix), paste0("-", country_suffix), ""),
      paste0("-", resolution),
      ".zip"
    )
  )

zip_file
```

```{r}
#| eval: true

zip_file |>
  zip::zip(
    files =
      data_dir |>
      fs::dir_ls(
        type = "file",
        regexp = "\\.zip$|\\.gitignore$",
        recurse = TRUE,
        invert = TRUE
      ) |>
      fs::path_rel(data_dir),
    root = data_dir
  )

beepr::beep(1)
```

## Uploading the Files to OSF

When uploading processed files, run only the code chunk below and skip the preparation steps.

```{r}
#| eval: true

osf_files <- zip_file

osf_files
```

### Preparing the Metadata

```{r}
#| eval: false

zip_dir <- fs::path(wc_raw_data_series_res_dir, "zip")
```

```{r}
#| eval: false

zip_files <- zip_dir |> fs::dir_ls(type = "file")
```

```{r}
#| eval: false

sizes <-
  zip_files |>
  purrr::map_dbl(
    .f = rutils::get_file_size,
    .progress = TRUE
  ) |>
  fs::as_fs_bytes()

beepr::beep(1)
```

```{r}
#| eval: false

metadata <-
  dplyr::tibble(
    file = basename(zip_files),
    size = sizes
  ) |>
  dplyr::arrange(size) |>
  dplyr::mutate(
  size_cum_sum =
      size |>
      tidyr::replace_na() |>
      cumsum() |>
      fs::as_fs_bytes()
  )
```

```{r}
#| eval: false

metadata
```

```{r}
#| eval: false

metadata |> dplyr::pull(size_cum_sum) |> dplyr::last()
```

### Adding LICENSE and README Files

```{r}
#| eval: false

osf_files <- zip_files

osf_files
```

```{r}
#| eval: false

txt_license <- fs::file_copy(
  fs::path(zip_dir, "LICENSE.md"),
  fs::path(tempdir(), "license.txt"),
  overwrite = TRUE
)
```

```{r}
#| eval: false

osf_files <-
  zip_dir |>
    fs::path(c("LICENSE.md", "README.md")) |>
    c(
      fs::path(wc_raw_data_series_res_dir, "metadata.rds"),
      txt_license,
      zip_files
    ) |>
    unname()
```

### Setting the OSF Node

Pick **one** of the following.

Run the code chunk below to store data in the WorldClim OSF repository.

```{r}
#| eval: false

osf_id <- orbis::get_wc_osf_id(series, resolution)

osf_id
```

Run the code chunk below to store data in the LogoClim OSF repository.

```{r}
#| eval: true

if (resolution == "10m") {
  osf_id <- "x7fcm"
} else if (resolution == "5m") {
  osf_id <- "un5jm"
} else if (resolution == "2.5m") {
  osf_id <- "4vxet"
} else if (resolution == "30s") {
  osf_id <- "qgyha"
}

osf_id
```

### Uploading the Files to OSF

```{r}
#| eval: true

prettycheck::assert_internet()

osfr::osf_auth()
```

```{r}
#| eval: false

# osf_files <-
#   osf_files |>
#   stringr::str_subset("tmin")
#   magrittr::extract(seq(1, length(osf_files)))
```

```{r}
#| eval: true

osf_id |>
  osfr::osf_retrieve_node() |>
  osfr::osf_upload(
    path = osf_files,
    conflicts = "overwrite",
    progress = TRUE,
    verbose = TRUE
  )

beepr::beep(1)
```

## Deleting Files on OSF (Optional)

::: {.callout-caution}
Careful! There is no coming back from this.
:::

```{r}
#| eval: false

osf_id <- orbis::get_wc_osf_id(series, resolution)

osf_id
```

```{r}
#| eval: false

file_list <-
  osf_id |>
  osfr::osf_retrieve_node() |>
  osfr::osf_ls_files(
    pattern = "cruts4.06",
    n_max = Inf
  )

file_list
```

```{r}
#| eval: false

# for (i in split(file_list, seq_len(nrow(file_list)))) {
#   i |> osfr::osf_rm(check = FALSE)
# }
```
