---
execute:
  eval: false
---

# WordClim 2.1 data transformation for NetLogo

```{r}
#| eval: false

library(beepr, quietly = TRUE)
library(checkmate, quietly = TRUE)
library(geobr, quietly = TRUE)
library(lubridate, quietly = TRUE)
library(raster, quietly = TRUE)
library(rutils, quietly = TRUE) # danielvartan/rutils (GitHub)
library(rstudioapi, quietly = TRUE)
library(stringr, quietly = TRUE)
```

## Preset

```{r}
#| eval: false

# dir <- rstudioapi::selectDirectory()
dir <- here::here("data-raw")
if (!checkmate::test_directory_exists(dir)) dir.create(dir)
```

## Loading file

```{r}
#| eval: false

file <- here::here("data-raw", "wc2.1_10m_tmin_03.tif")
```

```{r}
#| eval: false

ras <- raster::raster(file)
```

## Crop raster file (Brazil)

```{r}
#| eval: false

br_shape <- geobr::read_country()
```

```{r}
#| eval: false

croped_ras <- 
  raster::crop(ras, raster::extent(br_shape)) |>
  raster::mask(br_shape)
```

```{r}
#| eval: false

raster::plot(croped_ras)
```

## Transform raster in .asc

```{r}
#| eval: false

zip_files <- 
  here::here(".temp") |>
  list.files(full.names = TRUE, pattern = "zip$")

for (i in zip_files) {
  i |> 
    utils::unzip(
      overwrite = TRUE,
      exdir = here::here(".temp")
    ) 
}
```

```{r}
#| eval: false

file.remove(zip_files)
```

```{r}
#| eval: false

files <- 
  here::here(".temp") |>
  list.files(full.names = TRUE, pattern = "tif$", recursive = TRUE)
  
```

```{r}
#| eval: false

convert_to_asc <- function(file) {
  checkmate::assert_character(file)

  years <- c(
    1872, 1900, 1911, 1920, 1933, 1940, 1950, 1960, 1970, 1980, 1991, 2000,
    2001, 2010, 2013, 2014, 2015, 2016, 2017, 2018, 2019, 2020
  )
  
  br_shape <- geobr::read_country(
    year = 2020,
    showProgress = FALSE
  ) |>
    rutils:::shush()
  
  cli::cli_progress_bar(
    name = "Converting GeoTIFF to ASCII",
    total = length(file),
    clear = FALSE
  )
  
  for (i in file) {
    checkmate::assert_file(i, access = "r")

    year <- 
      i |>
      stringr::str_extract("19[0-9]{2}|20[0-9]{2}") |>
      as.numeric()
    
    if (is.na(year)){
      cli::cli_abort("Year not found in the file name.")
    }
    
    br_shape <- geobr::read_country(
      year = years[which.min(abs(years - year))],
      showProgress = FALSE
    )
    
    asc_file <- stringr::str_replace(i, "tif$", "asc")
    
    if (stringr::str_detect(asc_file, "_bio_")) {
      asc_file <- asc_file |> stringr::str_replace("_bio_", "_bioc_")
      
      if (stringr::str_detect(asc_file, "[0-9]{2}.asc$")) {
        asc_file <- paste0(
          stringr::str_extract(asc_file, ".*(?=[0-9]{2}.asc)"),
          "bio",
          stringr::str_extract(asc_file, "[0-9]{2}.asc$")
      )
      } else {
        asc_file <- paste0(
          stringr::str_extract(asc_file, ".*(?=[0-9]{1}.asc)"),
          "bio0",
          stringr::str_extract(asc_file, "[0-9]{1}.asc$")
        )
      }
    }
    
    data_i <- 
      i |> 
      raster::stack() |>
      raster::stack() |>
      raster::crop(raster::extent(br_shape)) |>
      raster::mask(br_shape) |>
      raster::aggregate(fact = 2)
    
    if (!length(names(data_i)) == 1) {
      if (stringr::str_detect(names(data_i)[1], "^bio")) {
        suffix <- psate0(
          "_",
          names(data_i)
        )
      } else {
        suffix <- paste0(
          "-",
          stringr::str_extract(names(data_i), "[0-9]{2}$")
        )
      }
      
      asc_file <- paste0(
        stringr::str_extract(asc_file, ".*(?=.asc)"), 
        suffix,
        ".asc"
      )
    }
    
    data_i |> 
      raster::writeRaster(
        filename = asc_file, 
        format = "ascii",
        bylayer = ifelse(length(names(data_i)) == 1, FALSE, TRUE),
        overwrite = TRUE
      )
    
    cli::cli_progress_update()
  }
  
  invisible(NULL)
}
```

```{r}
#| eval: false
#| output: false

convert_to_asc(files)

beepr::beep(1)
```

```{r}
#| eval: false

file.remove(files)
```

## Renaming files

```{r}
#| eval: false

files <- 
  here::here("data-raw", "historical-climate-data") |>
  list.files(full.names = TRUE, pattern = "asc$", recursive = TRUE)

for (i in files) {
  if (stringr::str_detect(i, "_bio_")) {
    file.rename(i, stringr::str_replace(i, "_bio_", "_bioc_"))
  } else {
    next
  }
}
```

```{r}
#| eval: false

files <- 
  here::here("data-raw", "historical-climate-data") |>
  list.files(full.names = TRUE, pattern = "asc$", recursive = TRUE)

for (i in files) {
  if (stringr::str_detect(asc_file, "[0-9]{1,2}.asc$")) {
    if (stringr::str_detect(asc_file, "[0-9]{1}.asc$")) {
      suffix <- "bio0"
    } else {
      suffix <- "bio"
    }
    
    file.rename(
      i,
      paste0(
        stringr::str_extract(i, ".*(?=[0-9]{1,2}.asc)"),
        suffix,
        stringr::str_extract(i, "[0-9]{1,2}.asc$")
      )
    )
  } else {
    next
  }
}
```

```{r}
#| eval: false

files <- 
  here::here("data-raw", "future-climate-data") |>
  list.files(full.names = TRUE, pattern = "asc$", recursive = TRUE)

for (i in files) {
  if (stringr::str_detect(i, "_bioc_")) {
    file.rename(i, stringr::str_replace(i, "-bio", "_bio"))
  } else {
    next
  }
}
```

## Extracting data (Just for checking)

```{r}
#| eval: false

files <- 
  here::here("data-raw") |>
  list.files(full.names = TRUE, pattern = "asc$", recursive = TRUE)
```

### Data resolution

```{r}
#| eval: false

stringr::str_extract(files, "(?<=wc2.1_)(30s|2.5m|5m|10m)") |> 
  rutils:::drop_na() |>
  unique()
```

### Months

```{r}
#| eval: false

stringr::str_extract(files, "(?<=-)[0-9]{2}(?=.asc)") |> 
  rutils:::drop_na() |>
  unique()
```

### Historical years

```{r}
#| eval: false

stringr::str_extract(files, "[0-9]{4}(?=-[0-9]{2}.asc)") |> 
  rutils:::drop_na() |>
  unique()
```

### Historical year-month

```{r}
#| eval: false

stringr::str_extract(files, "[0-9]{4}-[0-9]{2}(?=.asc)") |> 
  rutils:::drop_na() |>
  unique() |>
  lubridate::ym()
```

### Future years

```{r}
#| eval: false

stringr::str_extract(files, "[0-9]{4}-[0-9]{4}(?=.asc)") |> 
  rutils:::drop_na() |>
  unique()
```

## GCM

```{r}
#| eval: false

stringr::str_extract(files, "(?<=_)[A-Z].+(?=_ssp[0-9]{3}_[0-9]{4}-[0-9]{4}.asc)") |> 
  rutils:::drop_na() |>
  unique()
```

### SSP

```{r}
#| eval: false

stringr::str_extract(files, "ssp[0-9]{3}(?=_[0-9]{4}-[0-9]{4}.asc)") |> 
  rutils:::drop_na() |>
  unique()
```
