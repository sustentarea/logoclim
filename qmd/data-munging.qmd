---
execute:
  eval: false
---

# WorldClim 2.1: Data Transformation for NetLogo

## Overview

This document provides a step-by-step guide to transform the WorldClim 2.1 data for NetLogo. It follows the download process outlined in the [WorldClim 2.1: Data Download](data-download.qmd) document. You must have already downloaded the WorldClim data files.

::: {.callout-important}
This process may take some time to complete. Please be patient.
:::

## Setting the Environment

::: {.callout-important}
Date: 2025-04-09

The `terra` package may encounter issues when exporting data to ASCII format. If this happens, you can resolve it by installing the development version of the package from GitHub using the following command:

```r
# install.packages("remotes")
remotes::install_github("rspatial/terra")
```
:::

```{r}
#| eval: false

library(beepr)
library(checkmate)
library(fs)
library(geodata)
library(here)
library(ISOcodes)
library(lubridate)
library(magrittr)
library(rutils) # github.com/danielvartan/rutils
library(stringr)
library(terra)
library(utils)
```

```{r}
source(here::here("R", "geotiff_to_ascii.R"))
```

## Setting Variables

### Options

```{r}
options(cli.progress_show_after = 0)
```

### Series

```{r}
series <- "historical-climate-data"
```

```{r}
#| eval: false

series <- "historical-monthly-weather-data"
```

```{r}
#| eval: false

series <- "future-climate-data"
```

### Directories

```{r}
data_dir <- here::here("data")
```

```{r}
data_series_dir <- fs::path(data_dir, "gbr", series)
```

```{r}
raw_data_dir <- here::here("data-raw")
```

```{r}
wc_raw_data_dir <- fs::path(raw_data_dir, "worldclim")
```

```{r}
wc_raw_data_series_dir <- fs::path(wc_raw_data_dir, series)
```

```{r}
dirs <- c(
  data_dir, data_series_dir, raw_data_dir, wc_raw_data_dir,
  wc_raw_data_series_dir
)

for (i in dirs) {
  if (!checkmate::test_directory_exists(i)) {
    fs::dir_create(i, recurse = TRUE)
  }
}
```

### Cropping Shape

#### For Getting the Shape of a Single Country

For a list of ISO 3166-1 alpha-3 country codes, refer to the [ISO 3166-1 Wikipedia page](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3).

```{r}
crop_shape <- geodata::gadm("gbr", level = 0, path = raw_data_dir)
```

#### For Getting Only the Mainland of a Country

```{r}
#| eval: false

crop_shape <-
  geodata::gadm("usa", level = 1, path = raw_data_dir) %>%
  terra::subset(., !.$NAME_1 %in% c("Alaska", "Hawaii"))
```

#### For Getting a Particular Region

```{r}
#| eval: false

countries <-
  geodata::country_codes() |>
  dplyr::filter(continent == "Asia") |>
  magrittr::extract2("ISO3")

crop_shape <-
  geodata::world(resolution = 1, path = raw_data_dir) %>%
  terra::subset(., .$GID_0 %in% countries)
```

#### For Getting the Whole World

```{r}
#| eval: false

crop_shape <- geodata::world(resolution = 1, path = raw_data_dir)
```

## Unzipping the Files (If Needed)

```{r}
#| eval: false

zip_dir <- fs::path(wc_raw_data_series_dir, "zip")

if (!checkmate::test_directory_exists(zip_dir)) {
  zip_dir |> fs::dir_create(recurse = TRUE)
}
```

```{r}
#| eval: false

tif_dir <- fs::path(wc_raw_data_series_dir, "tif")

zip_files <-
  zip_dir |>
  fs::dir_ls(type = "file", regexp = "zip$")

for (i in zip_files) {
  i |>
    utils::unzip(
      overwrite = TRUE,
      exdir = tif_dir
    )
}
```

```{r}
#| eval: false

zip_dir |> fs::dir_delete()
```

## Gathering the `tif` Files

```{r}
#| eval: false

tif_files <-
  fs::path(wc_raw_data_series_dir, "tif") |>
  fs::dir_ls(type = "file", regexp = "tif$", recurse = TRUE)
```

## Testing the Files

```{r}
tif_file <- tif_files[1]
```

```{r}
#| eval: false

ras <- tif_file |> terra::rast()
```

```{r}
#| eval: false

croped_ras <-
  ras |>
  terra::crop(
    crop_shape,
    snap = "near",
    mask = TRUE,
    touches = TRUE,
    extend = TRUE
  )
```

```{r}
#| eval: false

croped_ras |> terra::plot()
```

## Cropping and Transforming Data to ASCII

```{r}
asc_dir <- fs::path(wc_raw_data_series_dir, "asc")

if (!checkmate::test_directory_exists(asc_dir)) {
  asc_dir |> fs::dir_create(recurse = TRUE)
}
```

```{r}
#| eval: false
#| output: false

geotiff_to_ascii(
  file = tif_files,
  shape = crop_shape,
  aggregate = NULL,
  dir = asc_dir
)

beepr::beep(1)
```

```{r}
#| eval: false

asc_dir |>
  fs::dir_ls(type = "file", regexp = "asc.aux.xml$|prj$", recurse = TRUE) |>
  fs::file_delete()
```

## Gathering the `asc` Files

```{r}
#| eval: false

asc_files <-
  asc_dir |>
  fs::dir_ls(type = "file", regexp = "asc$", recurse = TRUE)
```

## Checking the Final Files

### By Resolution

```{r}
#| eval: false

asc_files |>
  stringr::str_extract("(?<=wc2.1_)(30s|2.5m|5m|10m)") |>
  rutils::drop_na() |>
  unique()
```

### By Month

```{r}
#| eval: false

asc_files |>
  stringr::str_extract("(?<=-)[0-9]{2}(?=.asc)") |>
  rutils::drop_na() |>
  unique()
```

### By Year

```{r}
#| eval: false

asc_files |>
  stringr::str_extract("(?<=_)[0-9]{4}(?=-[0-9]{2}.asc)") |>
  rutils::drop_na() |>
  unique()
```

### By Year-Month

```{r}
#| eval: false

asc_files |>
  stringr::str_extract("(?<=_)[0-9]{4}-[0-9]{2}(?=.asc)") |>
  rutils::drop_na() |>
  unique()
```

### By Group of Years

```{r}
#| eval: false

asc_files |>
  stringr::str_extract("[0-9]{4}-[0-9]{4}") |>
  rutils::drop_na() |>
  unique()
```

### By Global Climate Model (GCM)

```{r}
#| eval: false

asc_files |>
  stringr::str_extract("(?<=_)[A-Z].+(?=_ssp[0-9]{3})") |>
  rutils:::drop_na() |>
  unique()
```

### By Shared Socioeconomic Pathways (SSP)

```{r}
#| eval: false

asc_files |>
  stringr::str_extract("ssp[0-9]{3}") |>
  rutils:::drop_na() |>
  unique()
```

## Moving the Files

```{r}
#| eval: false

asc_files |>
  fs::file_move(
    new_path = fs::path(data_series_dir, basename(asc_files))
  )
```

## Zipping the Files

```{r}
#| eval: false

# utils::zip(
#   zipfile = fs::path(data_dir, "asia_10m.zip"),
#   files = fs::dir_ls(data_series_dir, recurse = TRUE),
#   flags = "-jq"
# )
```
