---
params:
  series: "historical-climate-data"
  resolution: "10m"
  model: NULL
  country_code: "bra"
---

# LogoClim: WorldClim 2.1 Data Transformation for NetLogo

## Overview

This document provides a step-by-step guide to transform the WorldClim 2.1 data for NetLogo. It follows the download process outlined in the [LogoClim: WorldClim 2.1 Data Download](data-download.qmd) document. To use it, you must have already downloaded and unzipped the WorldClim 2.1 data files.

::: {.callout-important}
This process may take some time to complete. Please be patient.
:::

## Setting the Environment

::: {.callout-important}
Notice date: 2025-04-09

The `terra` package may encounter issues when exporting data to ASCII format. If this happens, you can resolve it by installing the development version of the package from GitHub using the following command:

```r
# install.packages("remotes")
remotes::install_github("rspatial/terra")
```
:::

```{r}
library(beepr)
library(fs)
library(geodata)
library(here)
library(magrittr)
library(orbis) # github.com/danielvartan/orbis
library(rutils) # github.com/danielvartan/rutils
library(stringr)
library(terra)
library(zip) # OS independent
```

```{r}
source(here::here("R", "wc_license.R"))
source(here::here("R", "logoclim_readme.R"))
```

## Setting the Initial Variables

### `params`

This code chunk is only used when the document is rendered from the command line. See `quarto-loop.R` in the `R` directory for more details.

```{r}
if (exists("params")) params |> list2env(envir = environment())
```

### Options

```{r}
options(cli.progress_show_after = 0)
```

### Series

Pick **one** of the following, according to the data you downloaded.

```{r}
#| eval: false

series <- "historical-climate-data"
```

```{r}
#| eval: false

series <- "historical-monthly-weather-data"
```

```{r}
#| eval: false

series <- "future-climate-data"
```

### Resolution

Pick **one** of the following, according to the data you downloaded.

```{r}
#| eval: false

resolution <- "10m"
```

```{r}
#| eval: false

resolution <- "5m"
```

```{r}
#| eval: false

resolution <- "2.5m"
```

```{r}
#| eval: false

resolution <- "30s"
```

```{r}
#| eval: false

resolution <- "all"
```

### Global Climate Model

::: {.callout-note}
This is only relevant when working with future climate data. Here you can specify which model(s) to process. To process data for all models, set `model <- NULL`.

Use `model <- NULL` for other series.
:::

Pick **one** of the following, according to the data you downloaded.

```{r}
#| eval: false

model <- NULL
```

```{r}
#| eval: false

model <- c(
  "ACCESS-CM2", "BCC-CSM2-MR", "CMCC-ESM2", "EC-Earth3-Veg", "FIO-ESM-2-0",
  "GFDL-ESM4", "GISS-E2-1-G", "HadGEM3-GC31-LL", "INM-CM5-0", "IPSL-CM6A-LR",
  "MIROC6", "MPI-ESM1-2-HR", "MRI-ESM2-0", "UKESM1-0-LL"
)
```

Below is the complete list of models available for the *Future Climate Data* series. You can find them via a link at the bottom of the data series webpage. Click [here](https://www.worldclim.org/data/cmip6/cmip6_clim10m.html#:~:text=are%20variations%20available-,here.,-Historical%20climate%20data) to view the link location.

```{r}
model <- c(
  "ACCESS-CM2", "ACCESS-ESM1-5", "BCC-CSM2-MR", "CanESM5", "CanESM5-CanOE",
  "CMCC-ESM2", "CNRM-CM6-1", "CNRM-CM6-1-HR", "CNRM-ESM2-1", "EC-Earth3-Veg",
  "EC-Earth3-Veg-LR", "FIO-ESM-2-0", "GFDL-ESM4", "GISS-E2-1-G", "GISS-E2-1-H",
  "HadGEM3-GC31-LL", "INM-CM4-8", "INM-CM5-0", "IPSL-CM6A-LR", "MIROC-ES2L",
  "MIROC6", "MPI-ESM1-2-HR", "MPI-ESM1-2-LR", "MRI-ESM2-0", "UKESM1-0-LL"
)
```

### Directories

Check the **paths** to the directories where the final data will be stored.

LogoClim requires the data files to be organized in the following directory structure:

```text
data
├── historical-climate-data
├── historical-monthly-weather-data
├── future-climate-data
```

The following settings assumes that the data will be stored in the `data` directory of the project, but you can change it to any other directory. If you do, make sure to change the model `data-path` variable accordingly.

```{r}
raw_data_dir <- here::here("data-raw")
```

```{r}
wc_raw_data_dir <- fs::path(raw_data_dir, "worldclim")
```

```{r}
wc_raw_data_series_dir <- fs::path(wc_raw_data_dir, series)
```

```{r}
wc_raw_data_series_res_dir <- fs::path(
  wc_raw_data_dir,
  series,
  resolution |> stringr::str_replace_all("\\.", "\\-")
)
```

```{r}
data_dir <- here::here("data")
```

```{r}
data_series_dir <- fs::path(data_dir, series)
```

```{r}
dirs <- c(
  raw_data_dir, wc_raw_data_dir, wc_raw_data_series_dir,
  wc_raw_data_series_res_dir, data_dir, data_series_dir
)

for (i in dirs) {
  if (!dir.exists(i)) {
    fs::dir_create(i, recurse = TRUE)
  }
}
```

### Shape

::: {.callout-note}
For a list of ISO 3166-1 alpha-3 country codes, refer to the [ISO 3166-1 Wikipedia page](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3).

See [`rnaturalearth`](https://ropensci.github.io/rnaturalearth/) for an alternative way to get good quality country shapes.
:::

Pick the **shape** you want to use.

```{r}
#| eval: false

country_code <- "bra"
```

#### Single Country

Change to the desired country code (ISO 3166-1 alpha-3).

```{r}
#| eval: false

shape <- geodata::gadm(
  country = country_code,
  level = 0,
  path = raw_data_dir
)
```

#### Mainland of a Country

##### United States

```{r}
#| eval: false

shape <-
  geodata::gadm(
    country = "usa",
    level = 1,
    path = raw_data_dir
  ) %>%
  terra::subset(., !.$NAME_1 %in% c("Alaska", "Hawaii"))
```

##### Portugal

```{r}
#| eval: false

shape <-
  geodata::gadm(
    country = "prt",
    level = 1,
    path = raw_data_dir
  ) %>%
  terra::subset(., !.$NAME_1 %in% c("Azores", "Madeira"))
```

##### Spain

```{r}
#| eval: false

shape <-
  geodata::gadm(
    country = "esp",
    level = 1,
    path = raw_data_dir
  ) %>%
  terra::subset(., !.$NAME_1 %in% c("Islas Canarias"))
```

#### European Part of Russia

```{r}
#| eval: false

european_russia_regions <- c(
  "Adygey", "Arkhangel'sk", "Astrakhan'", "Bashkortostan", "Belgorod",
  "Bryansk", "Chechnya", "Chuvash", "City of St. Petersburg", "Dagestan",
  "Ingush", "Ivanovo", "Kabardin-Balkar", "Kaliningrad", "Kalmyk", "Kaluga",
  "Karachay-Cherkess", "Karelia", "Kirov", "Komi", "Kostroma", "Krasnodar",
  "Kursk", "Leningrad", "Lipetsk", "Mariy-El", "Mordovia", "Moscow City",
  "Moskva", "Murmansk", "Nenets", "Nizhegorod", "North Ossetia", "Novgorod",
  "Orel", "Orenburg", "Penza", "Perm'", "Pskov", "Rostov", "Ryazan'",
  "Samara", "Saratov", "Smolensk", "Stavropol'", "Tambov", "Tatarstan",
  "Tula", "Tver'", "Udmurt", "Ul'yanovsk", "Vladimir", "Volgograd",
  "Vologda", "Voronezh", "Yaroslavl'"
)
```

```{r}
#| eval: false

shape <-
  geodata::gadm(
    country = "rus",
    level = 1,
    path = raw_data_dir
  ) %>%
  terra::subset(., .$NAME_1 %in% european_russia_regions)
```

#### European Region

```{r}
#| eval: false

european_russia_regions <- c(
  "Adygey", "Arkhangel'sk", "Astrakhan'", "Bashkortostan", "Belgorod",
  "Bryansk", "Chechnya", "Chuvash", "City of St. Petersburg", "Dagestan",
  "Ingush", "Ivanovo", "Kabardin-Balkar", "Kaliningrad", "Kalmyk", "Kaluga",
  "Karachay-Cherkess", "Karelia", "Kirov", "Komi", "Kostroma", "Krasnodar",
  "Kursk", "Leningrad", "Lipetsk", "Mariy-El", "Mordovia", "Moscow City",
  "Moskva", "Murmansk", "Nenets", "Nizhegorod", "North Ossetia", "Novgorod",
  "Orel", "Orenburg", "Penza", "Perm'", "Pskov", "Rostov", "Ryazan'",
  "Samara", "Saratov", "Smolensk", "Stavropol'", "Tambov", "Tatarstan",
  "Tula", "Tver'", "Udmurt", "Ul'yanovsk", "Vladimir", "Volgograd",
  "Vologda", "Voronezh", "Yaroslavl'"
)
```

```{r}
#| eval: false

european_russia_shape <-
  geodata::gadm(
    country = "rus",
    level = 1,
    path = raw_data_dir
  ) %>%
  terra::subset(., .$NAME_1 %in% european_russia_regions)
```

```{r}
#| eval: false

countries <-
  geodata::country_codes() |>
  dplyr::filter(continent == "Europe") |>
  magrittr::extract2("ISO3") |>
  stringr::str_subset("RUS", negate =  TRUE)

shape <-
  geodata::world(resolution = 1, path = raw_data_dir) %>%
  terra::subset(., .$GID_0 %in% countries) |>
  terra::union(european_russia_shape)
```

#### Continent

```{r}
#| eval: false

countries <-
  geodata::country_codes() |>
  dplyr::filter(continent == "Africa") |>
  magrittr::extract2("ISO3")

shape <-
  geodata::world(resolution = 1, path = raw_data_dir) %>%
  terra::subset(., .$GID_0 %in% countries)
```

#### World as a Whole

```{r}
#| eval: false

shape <- NULL
```

### Box

::: {.callout-note}
Use this option if you want to crop the data to a specific area. The box is defined by the coordinates of the bounding box in the format `c(xmin, xmax, ymin, ymax)`.
:::

```{r}
#| eval: true

box <- NULL
```

#### Europe

```{r}
#| eval: false

# xmin, xmax, ymin, ymax
# Iceland, Azerbaijan, Cyprus, Norway
box <- c(-24.534, 50.601, 34.625, 71.181)
```

## Gathering the `tif` Files

```{r}
tif_dir <- fs::path(wc_raw_data_series_res_dir, "tif")
```

```{r}
tif_files <-
  tif_dir |>
  fs::dir_ls(type = "file", regexp = "tif$", recurse = TRUE)
```

```{r}
if (!is.null(model)) {
  tif_files <-
    tif_files %>%
    magrittr::extract(
      stringr::str_detect(
        basename(.),
        paste0("(?<=_)", model)
      )
    )
}
```

## Testing the Files (Optional)

```{r}
#| eval: false

tif_file <- tif_files |> sample(1)
```

```{r}
#| eval: false

raster <- tif_file |> terra::rast()
```

```{r}
#| eval: false

if (!is.null(shape)) {
  shape_x_min <- round(terra::ext(shape)[1])
  shape_x_max <- round(terra::ext(shape)[2])

  if ((shape_x_max - shape_x_min) > 180) {
    cropped_ras <-
      raster |>
      orbis::shift_and_crop(
        shape,
        dx = dplyr::case_when(
          shape$GID_0 == "USA" ~ 30,
          shape$GID_0 == "RUS" ~ -45,
          TRUE ~ -45
        )
      )
  } else {
    cropped_ras <-
      raster |>
      terra::crop(
        shape,
        snap = "near",
        mask = TRUE,
        touches = TRUE,
        extend = TRUE
      )
  }
} else {
  cropped_ras <- raster
}
```

```{r}
#| eval: false

if (!is.null(box)) cropped_ras <- cropped_ras |> terra::crop(box)
```

```{r}
#| eval: false

cropped_ras |> terra::plot()
```

## Cropping and Transforming Data to ASCII

```{r}
if (!is.null(shape)) {
  dx <- dplyr::case_when(
    shape$GID_0[1] == "USA" ~ 30,
    shape$GID_0[1] == "RUS" ~ -45,
    TRUE ~ -45
  )
} else {
  dx <- -45
}
```

```{r}
#| output: false

orbis::wc_to_ascii(
  file = tif_files,
  dir = data_series_dir,
  shape = shape,
  box = box,
  dateline_fix = ifelse(is.null(shape), FALSE, TRUE),
  aggregate = NULL,
  overwrite = TRUE,
  dx = dx,
  na_flag = -9999
)

beepr::beep(1)
```

## Adding LICENSE and README Files

```{r}
for (i in c(data_dir, data_series_dir)) {
  wc_license() |> readr::write_lines(fs::path(i, "LICENSE.md"))
}
```

```{r}
download_date <-
  fs::path(tif_dir, "README.md") |>
  readr::read_lines() |>
  paste0(collapse = "\n") |>
  stringr::str_extract("\\d{4}-\\d{2}-\\d{2}")

logoclim_readme(resolution = resolution, download_date = download_date) |>
  readr::write_lines(fs::path(data_dir, "README.md"))

logoclim_readme(series, resolution, download_date) |>
  readr::write_lines(fs::path(data_series_dir, "README.md"))
```

## Deleting Non-ASCII Files (Optional)

```{r}
#| eval: false

data_series_dir |>
  fs::dir_ls(
    type = "file",
    regexp = "asc$",
    invert = TRUE
  ) |>
  fs::file_delete()
```

## Zipping the Final Files (Optional)

```{r}
#| eval: false

asc_files <-
  data_series_dir |>
  fs::dir_ls(
    type = "file",
    regexp = "asc$",
    recurse = TRUE
  )
```

```{r}
#| eval: false

country_code <- "bra"
country_suffix <- NULL # "box" # "mainland"
series_suffix <- NULL # "hcd" # "hmwd" # "fcd"
model <- NULL # "ACCESS-CM2"
```

```{r}
#| eval: false

zip_file <-
  data_dir |>
  fs::path(
      paste0(
      country_code,
      ifelse(!is.null(country_suffix), paste0("-", country_suffix), ""),
      paste0("-", stringr::str_replace_all(resolution, "\\.", "\\-")),
      ifelse(!is.null(series_suffix), paste0("-", series_suffix), ""),
      ifelse(!is.null(model), paste0("-", tolower(model)), ""),
      ".zip"
    )
  )

zip_file
```

```{r}
#| eval: false

zip_file |>
  zip::zip(
    files =
      data_dir |>
      fs::dir_ls(recurse = TRUE) |>
      fs::path_rel(data_dir),
    root = data_dir
  )
```
