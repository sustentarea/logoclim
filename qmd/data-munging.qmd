---
execute:
  eval: false
---

# LogoClim: WorldClim 2.1 Data Transformation for NetLogo

## Overview

This document provides a step-by-step guide to transform the WorldClim 2.1 data for NetLogo. It follows the download process outlined in the [LogoClim: WorldClim 2.1 Data Download](data-download.qmd) document. To use it, you must have already downloaded the WorldClim data files.

::: {.callout-important}
This process may take some time to complete. Please be patient.
:::

## Setting the Environment

::: {.callout-important}
Notice date: 2025-04-09

The `terra` package may encounter issues when exporting data to ASCII format. If this happens, you can resolve it by installing the development version of the package from GitHub using the following command:

```r
# install.packages("remotes")
remotes::install_github("rspatial/terra")
```
:::

```{r}
#| eval: false

library(beepr)
library(fs)
library(geodata)
library(here)
library(magrittr)
library(orbis) # github.com/danielvartan/orbis
library(rutils) # github.com/danielvartan/rutils
library(stringr)
library(terra)
library(zip) # OS independent
```

## Setting the Initial Variables

### Options

```{r}
options(cli.progress_show_after = 0)
```

### Series

Pick **one** of the following, according to the data you downloaded.

```{r}
series <- "historical-climate-data"
```

```{r}
#| eval: false

series <- "historical-monthly-weather-data"
```

```{r}
#| eval: false

series <- "future-climate-data"
```

### Resolution

Pick **one** of the following, according to the data you downloaded.

```{r}
resolution <- "10m"
```

```{r}
#| eval: false

resolution <- "5m"
```

```{r}
#| eval: false

resolution <- "2.5m"
```

```{r}
#| eval: false

resolution <- "30s"
```

```{r}
#| eval: false

resolution <- "all"
```

### Directories

Check the **paths** to the directories where the final data will be stored.

LogoClim requires the data files to be organized in the following directory structure:

```text
data
├── historical-climate-data
├── historical-monthly-weather-data
├── future-climate-data
```

The following settings assumes that the data will be stored in the `data` directory of the project, but you can change it to any other directory. If you do, make sure to change the model `data-path` variable accordingly.

```{r}
raw_data_dir <- here::here("data-raw")
```

```{r}
wc_raw_data_dir <- fs::path(raw_data_dir, "worldclim")
```

```{r}
wc_raw_data_series_dir <- fs::path(wc_raw_data_dir, series)
```

```{r}
wc_raw_data_series_res_dir <- fs::path(wc_raw_data_dir, series, resolution)
```

```{r}
data_dir <- here::here("data")
```

```{r}
data_series_dir <- fs::path(data_dir, series)
```

```{r}
#| eval: false

dirs <- c(
  raw_data_dir, wc_raw_data_dir, wc_raw_data_series_dir,
  wc_raw_data_series_res_dir, data_dir, data_series_dir
)

for (i in dirs) {
  if (!dir.exists(i)) {
    fs::dir_create(i, recurse = TRUE)
  }
}
```

### Shape

::: {.callout-note}
For a list of ISO 3166-1 alpha-3 country codes, refer to the [ISO 3166-1 Wikipedia page](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-3).
:::

Check the **shape** you want to use.

For getting the shape of a single country, use:

```{r}
shape <- geodata::gadm(
  country = "nor", # Change to the desired country code
  level = 0,
  path = raw_data_dir
)
```

For getting only the mainland of a country, use:

```{r}
#| eval: false

shape <-
  geodata::gadm(
    country = "usa",
    level = 1,
    path = raw_data_dir
  ) %>%
  terra::subset(., !.$NAME_1 %in% c("Alaska", "Hawaii"))
```

For getting a particular region, use:

```{r}
#| eval: false

countries <-
  geodata::country_codes() |>
  dplyr::filter(continent == "Asia") |>
  magrittr::extract2("ISO3")

shape <-
  geodata::world(resolution = 1, path = raw_data_dir) %>%
  terra::subset(., .$GID_0 %in% countries)
```

For getting the whole world, use:

```{r}
#| eval: false

shape <- NULL
```

## Unzipping the Files (Optional)

```{r}
#| eval: false

zip_dir <- fs::path(wc_raw_data_series_res_dir, "zip")
```

```{r}
#| eval: false

tif_dir <- fs::path(wc_raw_data_series_res_dir, "tif")

if (!dir.exists(tif_dir)) {
  tif_dir |> fs::dir_create(recurse = TRUE)
}
```

```{r}
#| eval: false
#| output: false

zip_files <-
  zip_dir |>
  fs::dir_ls(type = "file", regexp = "zip$")

cli::cli_progress_bar(
    name = "Unzipping data",
    total = length(zip_files),
    clear = FALSE
  )

for (i in zip_files) {
  i |>
    zip::unzip(
      overwrite = TRUE,
      exdir = tif_dir
    )

  cli::cli_progress_update()
}

cli::cli_progress_done()

beepr::beep(1)
```

```{r}
#| eval: false

zip_dir |> fs::dir_delete()
```

## Gathering the `tif` Files

```{r}
tif_dir <- fs::path(wc_raw_data_series_res_dir, "tif")
```

```{r}
#| eval: false

tif_files <-
  tif_dir |>
  fs::dir_ls(type = "file", regexp = "tif$", recurse = TRUE)
```

## Testing the Files (Optional)

```{r}
#| eval: false

tif_file <- tif_files[1]
```

```{r}
#| eval: false

ras <- tif_file |> terra::rast()
```

```{r}
#| eval: false

croped_ras <-
  ras |>
  terra::crop(
    shape,
    snap = "near",
    mask = TRUE,
    touches = TRUE,
    extend = TRUE
  )
```

```{r}
#| eval: false

croped_ras |> terra::plot()
```

## Cropping and Transforming Data to ASCII

```{r}
#| output: false

orbis::wc_to_ascii(
  file = tif_files,
  dir = data_series_dir,
  shape = shape,
  aggregate = NULL,
  overwrite = TRUE,
  na_flag = -9999
)

beepr::beep(1)
```

## Zipping the Files (Optional)

This is optional and only useful for storing the final data.

Check the **name of the file** where the data will be stored.

```{r}
#| eval: false

asc_files <-
  data_series_dir |>
  fs::dir_ls(
    type = "file",
    regexp = "asc$",
    recurse = TRUE
  )
```

```{r}
zip_file <- fs::path(data_dir, "bra-2-5m.zip")
```

```{r}
#| eval: false

zip_file |>
  zip::zip(
    files =
      data_dir |>
      fs::dir_ls(recurse = TRUE) |>
      fs::path_rel(data_dir),
    root = data_dir
  )
```
