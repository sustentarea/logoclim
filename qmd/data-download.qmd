---
params:
  series: "historical-climate-data"
  resolution: "10m"
  model: NULL
---

# LogoClim: WorldClim 2.1 Data Download

## Overview

This document provides a step-by-step guide to download the WorldClim 2.1 data from the [WorldClim website](https://worldclim.org/data/monthlywth.html).

::: {.callout-important}
This process may take some time to complete. Please be patient.
:::

## Setting the Environment

```{r}
library(beepr)
library(cli)
library(dplyr)
library(fs)
library(groomr) # github.com/danielvartan/groomr
library(here)
library(magrittr)
library(orbis) # github.com/danielvartan/orbis
library(purrr)
library(readr)
library(rutils) # github.com/danielvartan/rutils
library(rvest)
library(stringr)
```

```{r}
source(here::here("R", "wc_license.R"))
source(here::here("R", "wc_readme.R"))
```

## Setting the Initial Variables

### `params`

This code chunk is only used when the document is rendered from the command line. See `quarto-loop.R` in the `R` directory for more details.

```{r}
if (exists("params")) params |> list2env(envir = environment())
```

### Options

```{r}
options(cli.progress_show_after = 0)
```

### Series

Pick **one** of the following.

```{r}
#| eval: false

series <- "historical-climate-data"
```

```{r}
#| eval: false

series <- "historical-monthly-weather-data"
```

```{r}
#| eval: true

series <- "future-climate-data"
```

### Resolution

Pick **one** of the following.

```{r}
#| eval: false

resolution <- "10m"
```

```{r}
#| eval: false

resolution <- "5m"
```

```{r}
#| eval: true

resolution <- "2.5m"
```

```{r}
#| eval: false

resolution <- "30s"
```

```{r}
#| eval: false

resolution <- "all"
```

### Global Climate Model

::: {.callout-note}
This is only useful when dealing with future climate data. Here you can specify the model(s) you want to download. If you want to download all models, set `model <- NULL`.

Run `model <- NULL` when downloading other series.
:::

Pick **one** of the following.

```{r}
#| eval: false

model <- NULL
```

```{r}
#| eval: true

model <- c(
  "BCC-CSM2-MR", "CMCC-ESM2", "EC-Earth3-Veg", "FIO-ESM-2-0"
)
```

```{r}
#| eval: false

model <- c(
  "ACCESS-CM2", "BCC-CSM2-MR", "CMCC-ESM2", "EC-Earth3-Veg", "FIO-ESM-2-0",
  "GFDL-ESM4", "GISS-E2-1-G", "HadGEM3-GC31-LL", "INM-CM5-0", "IPSL-CM6A-LR",
  "MIROC6", "MPI-ESM1-2-HR", "MRI-ESM2-0", "UKESM1-0-LL"
)
```

### Directories

Check the paths to the directories where the data will be stored.

```{r}
raw_data_dir <- here::here("data-raw")
```

```{r}
wc_raw_data_dir <- fs::path(raw_data_dir, "worldclim")
```

```{r}
wc_raw_data_series_dir <- fs::path(wc_raw_data_dir, series)
```

```{r}
wc_raw_data_series_res_dir <- fs::path(
  wc_raw_data_dir,
  series,
  resolution |> stringr::str_replace_all("\\.", "\\-")
)
```

```{r}
dirs <- c(
  raw_data_dir, wc_raw_data_dir, wc_raw_data_series_dir,
  wc_raw_data_series_res_dir
)

for (i in dirs) {
  if (!dir.exists(i)) {
    fs::dir_create(i, recurse = TRUE)
  }
}
```

## Scrapping the Source

```{r}
html <-
  orbis::get_wc_url(series, resolution) |>
  rvest::read_html()
```

```{r}
urls <-
  html |>
  rvest::html_elements("a") |>
  rvest::html_attr("href") |>
  stringr::str_subset("geodata")
```

```{r}
if (!resolution == "all") {
  urls <-
    urls %>%
    magrittr::extract(
      stringr::str_detect(
        basename(.),
        paste0("(?<=_)", resolution)
      )
    )
}
```

```{r}
if (!is.null(model)) {
  urls <-
    urls %>%
    magrittr::extract(
      stringr::str_detect(
        basename(.),
        paste0("(?<=_)", model, collapse = "|")
      )
    )
}
```

## Creating the Metadata

```{r}
sizes <-
  urls |>
  purrr::map_dbl(
    .f = rutils::get_file_size,
    .progress = TRUE
  ) |>
  fs::as_fs_bytes()

beepr::beep(1)
```

```{r}
metadata <-
  dplyr::tibble(
    url = urls,
    file = basename(urls),
    size = sizes
  ) |>
  dplyr::arrange(size) |>
  dplyr::mutate(
  size_cum_sum =
      size |>
      tidyr::replace_na() |>
      cumsum() |>
      fs::as_fs_bytes()
  )

metadata
```

```{r}
metadata |> dplyr::pull(size_cum_sum) |> dplyr::last()
```

```{r}
metadata |>
  readr::write_rds(
    fs::path(wc_raw_data_series_res_dir, "metadata.rds")
  )
```

## Checking for Errors

```{r}
{
  cli::cli_alert_info(
    paste0(
      "{.strong {cli::col_red(rutils:::count_na(metadata$size))}} ",
      "url requests resulted in error."
    )
  )

  if (rutils::count_na(metadata$size) > 0) {
    cli::cli_alert_info("Their file names are:")
    cli::cli_li(metadata$file[is.na(metadata$size)])
  }
}
```

```{r}
if (any(is.na(metadata$size))) {
  paste0(
    "The following url requests resulted in error.",
    "\n\n",
    paste(metadata$url[is.na(metadata$size)], collapse = "\n")
  ) |>
    readr::write_lines(here::here("qmd", "data-download.log"))
}
```

## Adding LICENSE and README Files

```{r}
if (series == "future-climate-data") {
  dir <- fs::path(wc_raw_data_series_res_dir, "tif")
} else {
  dir <- fs::path(wc_raw_data_series_res_dir, "zip")
}

if (!dir.exists(dir)) {
  dir |> fs::dir_create(recurse = TRUE)
}
```

```{r}
dirs <- c(
  wc_raw_data_dir,
  wc_raw_data_series_dir,
  wc_raw_data_series_res_dir,
  dir
)

for (i in dirs) {
  wc_license() |> readr::write_lines(fs::path(i, "LICENSE.md"))
}
```

```{r}
wc_readme() |>
  readr::write_lines(fs::path(wc_raw_data_dir, "README.md"))

wc_readme(series) |>
  readr::write_lines(fs::path(wc_raw_data_series_dir, "README.md"))

wc_readme(series, resolution) |>
  readr::write_lines(fs::path(wc_raw_data_series_res_dir, "README.md"))

wc_readme(series, resolution) |>
  readr::write_lines(fs::path(dir, "README.md"))
```

## Downloading the Files

```{r}
broken_links <-
  metadata |>
  dplyr::pull(url) |>
  rutils::download_file(
    dir = dir,
    broken_links = TRUE
  )

beepr::beep(1)
```

If the download process was interrupted or not all files were downloaded, run the code chunk below to retry downloading only the missing files.

```{r}
#| eval: false

files <- dir |> fs::dir_ls(type = "file")

broken_links <-
  metadata |>
  dplyr::filter(!file %in% basename(files)) |>
  dplyr::pull(url) |>
  rutils::download_file(dir = dir, broken_links = TRUE)

beepr::beep(1)
```

## Unzipping the Files (Optional)

```{r}
#| eval: true

zip_dir <- fs::path(wc_raw_data_series_res_dir, "zip")
```

```{r}
#| eval: true

tif_dir <- fs::path(wc_raw_data_series_res_dir, "tif")

if (!dir.exists(tif_dir)) tif_dir |> fs::dir_create(recurse = TRUE)
```

```{r}
#| eval: true

if (dir.exists(zip_dir)) {
  accompanying_files <- c("README.md", "LICENSE.md")

  for (i in accompanying_files) {
    if (file.exists(fs::path(zip_dir, i))) {
      fs::file_copy(
        fs::path(zip_dir, i),
        fs::path(tif_dir, i),
        overwrite = TRUE
      )
    }
  }
}
```

```{r}
#| eval: true
#| output: false

if (dir.exists(zip_dir)) {
  zip_files <-
    zip_dir |>
    fs::dir_ls(type = "file", regexp = "zip$")

  cli::cli_progress_bar(
      name = "Unzipping data",
      total = length(zip_files),
      clear = FALSE
    )

  for (i in zip_files) {
    i |>
      zip::unzip(
        overwrite = TRUE,
        exdir = tif_dir
      )

    cli::cli_progress_update()
  }

  cli::cli_progress_done()

  beepr::beep(1)
}
```

```{r}
#| eval: false

if (dir.exists(zip_dir)) zip_dir |> fs::dir_delete()
```

## Zipping the Files (Optional)

You need to unzip the files first if you want to zip them again. Use the code chunk above to unzip the files.

### Creating a New Metadata

```{r}
#| eval: true

tif_dir <- fs::path(wc_raw_data_series_res_dir, "tif")
```

```{r}
#| eval: true

files <- tif_dir |> fs::dir_ls(type = "file", regexp = "tif$")
```

```{r}
#| eval: true

sizes <-
  files |>
  purrr::map_dbl(
    .f = rutils::get_file_size,
    .progress = TRUE
  ) |>
  fs::as_fs_bytes()

beepr::beep(1)
```

```{r}
#| eval: true

metadata <-
  dplyr::tibble(
    file = basename(files),
    size = sizes
  ) |>
  dplyr::arrange(size) |>
  dplyr::mutate(
  size_cum_sum =
      size |>
      tidyr::replace_na() |>
      cumsum() |>
      fs::as_fs_bytes()
  )

metadata
```

```{r}
#| eval: true

metadata |> dplyr::pull(size_cum_sum) |> dplyr::last()
```

### Zipping the Files

```{r}
#| eval: true

zip_dir <- fs::path(wc_raw_data_series_res_dir, "zip")

if (!dir.exists(zip_dir)) zip_dir |> fs::dir_create(recurse = TRUE)
```

```{r}
#| eval: true

climate_variables <-
  metadata |>
  dplyr::pull(file) |>
  orbis:::extract_wc_variable() |>
  unique()

climate_variables
```

```{r}
#| eval: true

models <-
  metadata |>
  dplyr::pull(file) |>
  orbis:::extract_wc_gcm() |>
  unique()

models
```

```{r}
#| eval: true

if (length(series) == 1) {
  switch(
    series,
    "historical-climate-data" = {
      series_suffix <- "hcd"
    },
    "historical-monthly-weather-data" = {
      series_suffix <- "hmwd"
    },
    "future-climate-data" = {
      series_suffix <- "fcd"
    }
  )
} else {
  series_suffix <- NULL
}
```

For zipping files by climate variable, use:

```{r}
#| eval: false

cli::cli_progress_bar(
  name = "Zipping data",
  total = length(climate_variables),
  clear = FALSE
)

for (i in climate_variables) {
  i_file <-
    metadata |>
    dplyr::pull(file) |>
    groomr::zip_files_by_pattern(
      pattern = i,
      prefix = paste0(
        stringr::str_replace_all(resolution, "\\.", "\\-"),
        ifelse(
          !is.null(series_suffix),
          paste0("-", series_suffix),
          ""
        ),
        "-"
      ),
      max_size = fs::fs_bytes("50GB"),
      appendices = c("LICENSE.md", "README.md"),
      root = tif_dir,
      dir = zip_dir
    )

  i_file |>
      fs::file_move(
        fs::path(
          zip_dir,
          stringr::str_to_lower(basename(i_file))
        )
      )

  cli::cli_progress_update()
}

cli::cli_progress_done()

beepr::beep(1)
```

For zipping files by model, use:

```{r}
#| eval: true

if (!is.null(model)) {
  cli::cli_progress_bar(
    name = "Zipping data",
    total = length(model),
    clear = FALSE
  )

  for (i in model) {
    i_file <-
      metadata |>
      dplyr::pull(file) |>
      groomr::zip_files_by_pattern(
        pattern = i,
        prefix = paste0(
          stringr::str_replace_all(resolution, "\\.", "\\-"),
          ifelse(
            !is.null(series_suffix),
            paste0("-", series_suffix),
            ""
          ),
          "-"
        ),
        max_size = fs::fs_bytes("50GB"),
        appendices = c("LICENSE.md", "README.md"),
        root = tif_dir,
        dir = zip_dir
      )

    i_file |>
      fs::file_move(
        fs::path(
          zip_dir,
          stringr::str_to_lower(basename(i_file))
        )
      )

    cli::cli_progress_update()
  }

  cli::cli_progress_done()
}

beepr::beep(1)
```

For zipping files by model and climate variable, use:

```{r}
#| eval: false

if (!is.null(model)) {
  cli::cli_progress_bar(
    name = "Zipping data",
    total = length(model) * length(climate_variables),
    clear = FALSE
  )

  for (i in model) {
    for (j in climate_variables) {
      i_file <-
        metadata |>
        dplyr::pull(file) |>
        groomr::zip_files_by_pattern(
          pattern = paste0(j, "_", i),
          prefix = paste0(
            stringr::str_replace_all(resolution, "\\.", "\\-"),
            ifelse(
              !is.null(series_suffix),
              paste0("-", series_suffix),
              ""
            ),
            "-"
          ),
          max_size = fs::fs_bytes("50GB"),
          appendices = c("LICENSE.md", "README.md"),
          root = tif_dir,
          dir = zip_dir
        )

      i_file |>
        fs::file_move(
          fs::path(
            zip_dir,
            stringr::str_to_lower(basename(i_file))
          )
        )

        cli::cli_progress_update()
    }
  }

  cli::cli_progress_done()
}

beepr::beep(1)
```

For zipping the entire series, use:

```{r}
#| eval: false

metadata |>
  dplyr::pull(file) |>
  groomr::zip_files_by_pattern(
    pattern = ".",
    prefix = paste0(
      stringr::str_replace_all(resolution, "\\.", "\\-"),
      ifelse(
        !is.null(series_suffix),
        paste0("-", series_suffix),
        ""
      )
    ),
    max_size = fs::fs_bytes("50GB"),
    appendices = c("LICENSE.md", "README.md"),
    root = tif_dir,
    dir = zip_dir
  )

beepr::beep(1)
```
